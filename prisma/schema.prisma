// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String     @id @unique
  username String     @unique
  oid      String     @unique
  xuid     String     @unique
  serviceTag String  @db.VarChar(4)
  emblemPath String?
  sessions Session[]
  oauth    Oauth?
  Playlist Playlist[]
}

model Oauth {
  userId                String   @id
  spartanToken          String   @db.Text
  spartanTokenExpiresAt DateTime
  refreshToken          String   @db.Text
  clearanceToken        String
  user                  User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model Session {
  id        String   @id @unique
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model Ugc {
  assetId         String        @id @unique @db.VarChar(36)
  versionId       String        @unique @db.VarChar(36)
  version         Int
  name            String        @db.VarChar(255)
  description     String        @db.VarChar(256)
  assetKind       Int           @db.UnsignedTinyInt
  thumbnailUrl    String        @db.VarChar(255)
  favorites       Int           @db.UnsignedInt
  likes           Int           @db.UnsignedInt
  bookmarks       Int           @db.UnsignedInt
  playsRecent     Int           @db.UnsignedInt
  playsAllTime    Int           @db.UnsignedInt
  averageRating   Int           @db.UnsignedTinyInt
  numberOfRatings Int           @db.UnsignedInt
  createdAt       DateTime
  updatedAt       DateTime
  publishedAt     DateTime
  hasNodeGraph    Boolean
  readOnlyClones  Boolean
  numberOfObjects Int?          @db.UnsignedInt
  files           Json
  recommended     Boolean       @default(false)
  contributors    Contributor[] @relation("ContributorToUgc") 
  author     Contributor? @relation("Author", references: [xuid], fields: [authorId] )
  authorId        String
  tag             Tag[]
  playlist        Playlist[]
}

model Contributor {
  xuid       String  @id
  gamertag   String
  serviceTag String  @db.VarChar(4)
  emblemPath String?
  contributorUgc        Ugc[] @relation("ContributorToUgc")
  authorUgc        Ugc[] @relation("Author")
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique
  ugc  Ugc[]
}

model Playlist {
  assetId          String  @id @unique @default(uuid())
  name        String
  assetKind       Int           @db.UnsignedTinyInt @default(5)
  description String
  thumbnailUrl  String
  private     Boolean
  userId      String
  user        User    @relation(references: [id], fields: [userId], onDelete: Cascade)
  ugc         Ugc[]

  @@index([userId])
}

model WaypointSync {
  id        Int      @id @default(autoincrement())
  syncedAt  DateTime
  assetKind SyncType @unique
}

model BetaAccess {
  gamertag   String  @id @unique
}

enum SyncType {
  Map
  Prefab
  UgcGameVariant
  Recommended343
  MapDeleted
  PrefabDeleted
  UgcGameVariantDeleted
}
